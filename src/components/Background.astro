<div id="star-background" class="fixed top-0 left-0 w-full h-screen z-[-1]">
</div>

<script type="module">
  import * as THREE from "/src/components/threejs/three.module.js";
  import { EffectComposer } from "/src/components/threejs/EffectComposer.js";
  import { RenderPass } from "/src/components/threejs/RenderPass.js";
  import { ShaderPass } from "/src/components/threejs/ShaderPass.js";
  import { RGBShiftShader } from "/src/components/threejs/RGBShiftShader.js";
  import { DotScreenShader } from "/src/components/threejs/DotScreenShader.js";

  let camera, scene, renderer, composer;
  let object;

  init();
  animate();

  function init() {
    const starBackground = document.getElementById("star-background");

    renderer = new THREE.WebGLRenderer({ alpha: true }); // Habilita el fondo transparente
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(starBackground.offsetWidth, starBackground.offsetHeight);
    starBackground.appendChild(renderer.domElement); // Agrega el elemento de renderizado al div

    camera = new THREE.PerspectiveCamera(
      70,
      window.innerWidth / window.innerHeight,
      1,
      1000
    );
    camera.position.z = 400;

    scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0x000000, 1, 1000);

    object = new THREE.Object3D();
    scene.add(object);

    const geometry = new THREE.SphereGeometry(1, 4, 4);
    const material = new THREE.MeshPhongMaterial({
      color: 0xffffff,
      flatShading: true,
    });

    for (let i = 0; i < 100; i++) {
      const mesh = new THREE.Mesh(geometry, material);
      mesh.position
        .set(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5)
        .normalize();
      mesh.position.multiplyScalar(Math.random() * 400);
      mesh.rotation.set(
        Math.random() * 2,
        Math.random() * 2,
        Math.random() * 2
      );
      mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 50;
      object.add(mesh);
    }

    scene.add(new THREE.AmbientLight(0xcccccc));

    const light = new THREE.DirectionalLight(0xffffff, 3);
    light.position.set(1, 1, 1);
    scene.add(light);

    // Postprocessing
    composer = new EffectComposer(renderer);
    composer.addPass(new RenderPass(scene, camera));

    const effect1 = new ShaderPass(DotScreenShader);
    effect1.uniforms["scale"].value = 4;
    composer.addPass(effect1);

    const effect2 = new ShaderPass(RGBShiftShader);
    effect2.uniforms["amount"].value = 0.0015;
    composer.addPass(effect2);

    // Asumiendo OutputPass existe y es vÃ¡lido; si no, quita esta parte
    // const effect3 = new OutputPass();
    // composer.addPass(effect3);

    window.addEventListener("resize", onWindowResize, false);
  }

  function onWindowResize() {
    const starBackground = document.getElementById("star-background");
    camera.aspect = starBackground.offsetWidth / starBackground.offsetHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(starBackground.offsetWidth, starBackground.offsetHeight);
    composer.setSize(starBackground.offsetWidth, starBackground.offsetHeight);
  }

  function animate() {
    requestAnimationFrame(animate);

    object.rotation.x += 0.005;
    object.rotation.y += 0.01;

    composer.render();
  }
</script>
