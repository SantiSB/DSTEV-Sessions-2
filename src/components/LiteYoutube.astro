---
interface Props {
  videoId: string;
  title?: string;
  backgroundImage?: string;
}

const {
  videoId,
  title = "Reproducir presentaci칩n de La Velada del A침o",
  backgroundImage,
} = Astro.props;
---

<lite-youtube
  class="rounded-lg"
  videoid={videoId}
  style={`background-image: url('${backgroundImage}')`}
  tabindex="0"
  aria-label="button"
>
  <a
    href={`https://youtube.com/watch?v=${videoId}`}
    class="lty-playbtn"
    title={title}
    role="button"
    tabindex="0"
  >
    <span class="lyt-visually-hidden">{title}</span>
  </a>
</lite-youtube>

<script>
  // @ts-nocheck
  /*
	Component extracted from: https://github.com/paulirish/lite-youtube-embed/tree/master
	*/

  class LiteYTEmbed extends HTMLElement {
    connectedCallback() {
      const video = this.getAttribute("videoid").split("?");
      this.videoId = video[0];
      this.short = video[1];

      let playBtnEl = this.querySelector(".lty-playbtn");
      this.playLabel =
        (playBtnEl && playBtnEl.textContent.trim()) ||
        this.getAttribute("playlabel") ||
        "Reproducir presentaci칩n de La Velada del A침o";

      this.dataset.title = this.getAttribute("title") || "";

      if (!this.style.backgroundImage) {
        this.style.backgroundImage = `url("https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg")`;
        this.upgradePosterImage();
      }

      if (!playBtnEl) {
        playBtnEl = document.createElement("button");
        playBtnEl.type = "button";
        playBtnEl.classList.add("lty-playbtn");
        this.append(playBtnEl);
      }
      if (!playBtnEl.textContent) {
        const playBtnLabelEl = document.createElement("span");
        playBtnLabelEl.className = "lyt-visually-hidden";
        playBtnLabelEl.textContent = this.playLabel;
        playBtnEl.append(playBtnLabelEl);
      }

      this.addNoscriptIframe();

      this.addEventListener("pointerover", LiteYTEmbed.warmConnections, {
        once: true,
      });

      this.addEventListener("click", this.activate);

      this.addEventListener("keydown", this.handleKeyPress);

      this.needsYTApi =
        this.hasAttribute("js-api") ||
        navigator.vendor.includes("Apple") ||
        navigator.userAgent.includes("Mobi");
    }

    static addPrefetch(kind, url, as) {
      const linkEl = document.createElement("link");
      linkEl.rel = kind;
      linkEl.href = url;
      if (as) {
        linkEl.as = as;
      }
      document.head.append(linkEl);
    }

    static warmConnections() {
      if (LiteYTEmbed.preconnected) return;

      LiteYTEmbed.addPrefetch("preconnect", "https://www.youtube-nocookie.com");
      LiteYTEmbed.addPrefetch("preconnect", "https://www.google.com");
      LiteYTEmbed.addPrefetch(
        "preconnect",
        "https://googleads.g.doubleclick.net"
      );
      LiteYTEmbed.addPrefetch("preconnect", "https://static.doubleclick.net");

      LiteYTEmbed.preconnected = true;
    }

    fetchYTPlayerApi() {
      if (window.YT || (window.YT && window.YT.Player)) return;

      this.ytApiPromise = new Promise((resolve, reject) => {
        const el = document.createElement("script");
        el.src = "https://www.youtube.com/iframe_api";
        el.async = true;
        el.onload = (_) => {
          YT.ready(resolve);
        };
        el.onerror = reject;
        this.append(el);
      });
    }

    async getYTPlayer() {
      if (!this.playerPromise) {
        await this.activate();
      }

      return this.playerPromise;
    }

    async addYTPlayerIframe() {
      this.fetchYTPlayerApi();
      await this.ytApiPromise;

      const videoPlaceholderEl = document.createElement("div");
      this.append(videoPlaceholderEl);

      const paramsObj = Object.fromEntries(this.getParams().entries());

      this.playerPromise = new Promise((resolve) => {
        const player = new YT.Player(videoPlaceholderEl, {
          width: "100%",
          videoId: this.videoId,
          playerVars: paramsObj,
          events: {
            onReady: (event) => {
              event.target.playVideo();
              resolve(player);
            },
          },
        });
      });
    }

    addNoscriptIframe() {
      const iframeEl = this.createBasicIframe();
      const noscriptEl = document.createElement("noscript");
      noscriptEl.innerHTML = iframeEl.outerHTML;
      this.append(noscriptEl);
    }

    getParams() {
      const params = new URLSearchParams(this.getAttribute("params") || []);
      params.append("autoplay", "1");
      params.append("playsinline", "1");
      params.append("color", "white");
      return params;
    }

    async activate() {
      if (this.classList.contains("lyt-activated")) return;
      const playBtnEl = this.querySelector(".lty-playbtn");
      if (playBtnEl && playBtnEl.hasAttribute("href")) {
        playBtnEl.removeAttribute("href");
      }
      this.classList.add("lyt-activated");

      if (this.style.backgroundImage !== "unset") {
        this.style.backgroundImage = "unset";
      }

      if (this.needsYTApi) {
        return this.addYTPlayerIframe(this.getParams());
      }

      const iframeEl = this.createBasicIframe();
      this.append(iframeEl);

      iframeEl.focus();
    }

    handleKeyPress(event) {
      if (event.code === "Enter" || event.code === "Space") {
        this.activate();
      }
    }

    createBasicIframe() {
      const iframeEl = document.createElement("iframe");
      iframeEl.width = 560;
      iframeEl.height = 315;
      iframeEl.title = this.playLabel;
      iframeEl.allow =
        "accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture";
      iframeEl.allowFullscreen = true;
      iframeEl.src = !this.short
        ? `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}`
        : `https://www.youtube.com/embed/${encodeURIComponent(this.videoId)}?${this.getParams().toString()}&${this.short}`;
      return iframeEl;
    }

    upgradePosterImage() {
      setTimeout(() => {
        const webpUrl = `https://i.ytimg.com/vi_webp/${this.videoId}/sddefault.webp`;
        const img = new Image();
        img.fetchPriority = "low";
        img.referrerpolicy = "origin";
        img.src = webpUrl;
        img.onload = (e) => {
          const noAvailablePoster =
            e.target.naturalHeight === 90 && e.target.naturalWidth === 120;
          if (noAvailablePoster) return;

          this.style.backgroundImage = `url("${webpUrl}")`;
        };
      }, 100);
    }
  }
  customElements.define("lite-youtube", LiteYTEmbed);
</script>

<style is:global>
  lite-youtube {
    background-color: #000;
    position: relative;
    display: block;
    contain: content;
    background-position: center center;
    background-size: cover;
    cursor: pointer;
    aspect-ratio: 16/9;
    width: 100%;
    height: auto;
    border: 2px solid var(--color-accent);
    transition: all 0.3s ease;
  }

  lite-youtube::before {
    content: attr(data-title);
    display: block;
    position: absolute;
    top: 0;
    background-image: linear-gradient(
      180deg,
      rgb(0 0 0 / 67%) 0%,
      rgb(0 0 0 / 54%) 14%,
      rgb(0 0 0 / 15%) 54%,
      rgb(0 0 0 / 5%) 72%,
      rgb(0 0 0 / 0%) 94%
    );
    height: 99px;
    width: 100%;
    font-family: "YouTube Noto", Roboto, Arial, Helvetica, sans-serif;
    color: hsl(0deg 0% 93.33%);
    text-shadow: 0 0 2px rgba(0, 0, 0, 0.5);
    font-size: 18px;
    padding: 25px 20px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    box-sizing: border-box;
  }

  lite-youtube:hover::before {
    color: white;
  }

  lite-youtube::after {
    content: "";
    display: block;
    padding-bottom: calc(100% / (16 / 9));
  }
  lite-youtube > iframe {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    border: 0;
  }

  lite-youtube > .lty-playbtn {
    display: block;
    width: 100%;
    height: 100%;
    background: no-repeat center/68px 48px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 68 48"><path d="M66.52 7.74c-.78-2.93-2.49-5.41-5.42-6.19C55.79.13 34 0 34 0S12.21.13 6.9 1.55c-2.93.78-4.63 3.26-5.42 6.19C.06 13.05 0 24 0 24s.06 10.95 1.48 16.26c.78 2.93 2.49 5.41 5.42 6.19C12.21 47.87 34 48 34 48s21.79-.13 27.1-1.55c2.93-.78 4.64-3.26 5.42-6.19C67.94 34.95 68 24 68 24s-.06-10.95-1.48-16.26z" fill="red"/><path d="M45 24 27 14v20" fill="white"/></svg>');
    position: absolute;
    cursor: pointer;
    z-index: 1;
    filter: grayscale(100%);
    transition: filter 0.1s cubic-bezier(0, 0, 0.2, 1);
    border: 0;
  }

  lite-youtube:hover > .lty-playbtn,
  lite-youtube .lty-playbtn:focus {
    filter: none;
  }

  lite-youtube.lyt-activated {
    cursor: unset;
  }
  lite-youtube.lyt-activated::before,
  lite-youtube.lyt-activated > .lty-playbtn {
    opacity: 0;
    pointer-events: none;
  }

  .lyt-visually-hidden {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }
</style>
